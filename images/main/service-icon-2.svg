<svg xmlns="http://www.w3.org/2000/svg" width="76" height="72" fill="none" viewBox="0 0 76 72"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><path fill="#83B3D3" d="M71.576 47.7H5.61c-2.305 0-4.11 1.9-4.11 4.3v3.5c0 2.4 1.905 4.3 4.11 4.3h.903v1.1c0 5.5 4.31 10.1 9.624 10.1h44.712c5.313 0 9.624-4.5 9.624-10.1v-1.1h.902c2.306 0 4.11-1.9 4.11-4.3V52c.201-2.3-1.704-4.3-3.91-4.3Zm-3.91 13.2c0 3.9-3.008 7-6.717 7H16.137c-3.71 0-6.717-3.2-6.717-7v-1.1h58.246v1.1Zm5.113-5.4c0 .7-.602 1.3-1.203 1.3H5.51c-.702 0-1.203-.6-1.203-1.3V52c0-.7.602-1.3 1.203-1.3h65.965c.702 0 1.203.6 1.203 1.3.1 0 .1 3.5.1 3.5ZM17.14 39.4l5.413 4.1 5.313-4.1 5.313 4.1 5.314-4.1 5.413 4.1 5.314-4.1 5.313 4.1 5.413-4.1 5.314 4.1 6.215-4.7-1.704-2.5-4.511 3.4-5.314-4.1-5.413 4.1-5.313-4.1-5.314 4.1-5.413-4.1-5.314 4.1-5.313-4.1-5.313 4.1-5.414-4.1-5.313 4.1-4.511-3.4-1.705 2.5 6.216 4.7 5.313-4.1ZM9.52 32.5h60.953c0-.6.1-1.2.1-1.9v-1.2C69.871 13.7 55.836 1 38.593 1 21.249 1 7.214 13.7 6.513 29.5v1.2c0 .6-.005 1.2.095 1.8H9.52ZM38.593 4c15.64 0 28.471 11.3 29.073 25.5H9.52C10.122 15.4 22.954 4 38.593 4Z"/><path fill="#83B3D3" d="M38.593 18.3c1.052 0 1.905-.895 1.905-2s-.853-2-1.905-2-1.905.895-1.905 2 .853 2 1.905 2ZM30.773 13.2c1.052 0 1.905-.895 1.905-2s-.853-2-1.905-2-1.904.895-1.904 2 .852 2 1.904 2ZM46.312 13.2c1.052 0 1.905-.895 1.905-2s-.853-2-1.905-2-1.904.895-1.904 2 .852 2 1.904 2Z"/></svg>